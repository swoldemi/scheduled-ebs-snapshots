AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Required Lambda Function Configuration"
        Parameters:
          - Interval
          - IntervalUnit
          - VolumeID
          - VolumeRegion
      - Label:
          default: "Optional Parameters for Cross Account Configuration"
        Parameters:
          - CrossAccountRoleArn
          - CrossAccountRoleExternalID

  AWS::ServerlessRepo::Application:
    Name: scheduled-ebs-snapshots
    Description: "Create snapshots of EBS volumes, at an interval, with cross-account support."
    Author: Simon Woldemichael
    SpdxLicenseId: MIT-0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ["scheduled", "ebs", "snapshots", "cross-account"]
    HomePageUrl: https://github.com/swoldemi/scheduled-ebs-snapshots
    SemanticVersion: 1.1.0
    SourceCodeUrl: https://github.com/swoldemi/scheduled-ebs-snapshots

Parameters:
  Interval:
    Type: String
    Description: Required. How often should the snapshot be taken?
  IntervalUnit:
    Type: String
    Description: Required. Using what unit of time will the snapshot be taken? One of '["minute", "minutes", "hour", "hours", "day", "days"]'.
    AllowedValues: ["minute", "minutes", "hour", "hours", "day", "days"]
  VolumeID:
    Type: String
    Description: Required. The ID of the EBS volume to take a snapshot of. Include 'vol-' prefix.
  VolumeRegion:
    Type: String
    Description: Required. The region in which the EBS volume to take a snapshot of exists. Defaults to us-east-1.
    Default: us-east-1
  CrossAccountRoleArn:
    Type: String
    Description: Optional. The ARN of the cross-account role where the EBS volume exists.
    Default: ""
  CrossAccountRoleExternalID:
    Type: String
    Description: Optional. The external ID associated with the cross-account role.
    Default: ""

Conditions:
  HasRoleArn:
    { "Fn::Not": [{ "Fn::Equals": ["", { "Ref": "CrossAccountRoleArn" }] }] }
  HasRoleExternalID:
    {
      "Fn::Not":
        [{ "Fn::Equals": ["", { "Ref": "CrossAccountRoleExternalID" }] }],
    }

Resources:
  ScheduledEBSSnapshotsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ec2:CreateSnapshot
                  - ec2:CreateTags
                  - cloudwatch:PutMetricData
                  - xray:PutTraceSegments
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: ScheduledEBSSnapshotsLambdaPolicy

  ScheduledEBSSnapshotsFunction:
    Type: AWS::Serverless::Function
    Description: Lambda handler for scheduled-ebs-snapshots
    Properties:
      FunctionName: scheduled-ebs-snapshots
      Handler: main
      Runtime: go1.x
      Tracing: Active
      MemorySize: 128
      Environment:
        Variables:
          VOLUME_ID: !Ref VolumeID
          ROLE_ARN:
            {
              "Fn::If":
                [
                  "HasRoleArn",
                  { "Ref": "CrossAccountRoleArn" },
                  { "Ref": "AWS::NoValue" },
                ],
            }
          ROLE_EXTERNAL_ID:
            {
              "Fn::If":
                [
                  "HasRoleExternalID",
                  { "Ref": "CrossAccountRoleExternalID" },
                  { "Ref": "AWS::NoValue" },
                ],
            }
          VOLUME_REGION: !Ref VolumeRegion
      Role: !GetAtt ScheduledEBSSnapshotsExecutionRole.Arn
      Timeout: 15

  ScheduledEBSSnapshotsFunctionEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: CloudWatch scheduled event to invoke the scheduled-ebs-snapshots Lambda function
      ScheduleExpression: !Sub rate(${Interval} ${IntervalUnit})
      State: ENABLED
      Targets:
        - Arn: !GetAtt ScheduledEBSSnapshotsFunction.Arn
          Id: ScheduledEBSSnapshotsFunctionEvent

  ScheduledEBSSnapshotsFunctionEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ScheduledEBSSnapshotsFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledEBSSnapshotsFunctionEvent.Arn

Outputs:
  LambdaFunctionArn:
    Description: ScheduledEBSSnapshots Lambda Function ARN
    Value: !GetAtt ScheduledEBSSnapshotsFunction.Arn
